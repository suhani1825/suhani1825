{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMkshBtooIvTU7eP3fb5bYx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/suhani1825/suhani1825/blob/main/practical_no_3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3a) Write a NumPy program to count the number of dimensions and number of bits for each element given in the array:"
      ],
      "metadata": {
        "id": "t2EORYYIoswc"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XbeCekFPoeBc",
        "outputId": "3117d3d1-5a65-4fce-a2ca-34b5fe428fd8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1,  6,  3],\n",
              "       [ 7,  5,  3],\n",
              "       [14,  7,  3]])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "import numpy as np\n",
        "array1=np.array([[1,6,3],[7,5,3],[14,7,3]])\n",
        "array1"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array1.size"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WqU_rf5ap9o9",
        "outputId": "059d5db4-6a17-4eba-80fe-78883f67ce55"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array1.ndim"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oI2foFZ7p9rD",
        "outputId": "4e2335c0-7c95-4855-9517-86ec6d0614a8"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array1.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JwUNFCbBqUPs",
        "outputId": "bbd3888b-eb49-40cb-98f5-939f8a1c82ec"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(3, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "array1.itemsize"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HBIMCy01qhmE",
        "outputId": "8ed1abc0-85d4-4fd4-ed1d-012afbd7fc33"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3b)write the numpy program to get copy of amatrix with the element below the k-th diagonal zeroed"
      ],
      "metadata": {
        "id": "cxYnPVBLqx6d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "array1=np.array([[1,2,3],[4,5,6],[7,8,9]])\n",
        "print(\"\\nSimple Matrix\")\n",
        "print(array1)\n",
        "print(\"\\ntriu() function without any parameter:\")\n",
        "print(np.triu(array1))\n",
        "print(\"\\nBelow 1st diagonal zeroed.\")\n",
        "print(np.triu(array1,-1))\n",
        "print(\"\\nBelow 2nd diagonal zeroed.\")\n",
        "print(np.triu(array1,-2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pK8vhP5CqpUE",
        "outputId": "f3207e55-cba4-4e25-f772-1aed5478fd25"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Simple Matrix\n",
            "[[1 2 3]\n",
            " [4 5 6]\n",
            " [7 8 9]]\n",
            "\n",
            "triu() function without any parameter:\n",
            "[[1 2 3]\n",
            " [0 5 6]\n",
            " [0 0 9]]\n",
            "\n",
            "Below 1st diagonal zeroed.\n",
            "[[1 2 3]\n",
            " [4 5 6]\n",
            " [0 8 9]]\n",
            "\n",
            "Below 2nd diagonal zeroed.\n",
            "[[1 2 3]\n",
            " [4 5 6]\n",
            " [7 8 9]]\n"
          ]
        }
      ]
    }
  ]
}